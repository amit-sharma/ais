// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "ais_types.h"
#include "../inst/include/ais.h"
#include <Rcpp.h>

using namespace Rcpp;

// metropolisC
NumericVector metropolisC(NumericVector x, double beta, int num_iterations_mcmc, NumericVector other_params);
RcppExport SEXP ais_metropolisC(SEXP xSEXP, SEXP betaSEXP, SEXP num_iterations_mcmcSEXP, SEXP other_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type num_iterations_mcmc(num_iterations_mcmcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type other_params(other_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(metropolisC(x, beta, num_iterations_mcmc, other_params));
    return rcpp_result_gen;
END_RCPP
}
// metropolisC2
NumericVector metropolisC2(NumericVector x, double beta, int num_iterations_mcmc, NumericVector other_params);
RcppExport SEXP ais_metropolisC2(SEXP xSEXP, SEXP betaSEXP, SEXP num_iterations_mcmcSEXP, SEXP other_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type num_iterations_mcmc(num_iterations_mcmcSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type other_params(other_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(metropolisC2(x, beta, num_iterations_mcmc, other_params));
    return rcpp_result_gen;
END_RCPP
}
// metropolisCbeta
NumericVector metropolisCbeta(NumericVector x, double beta, int num_iterations_mcmc, SEXP rproposal_fn_xpsexp, SEXP dproposal_fn_xpsexp, NumericVector other_params);
RcppExport SEXP ais_metropolisCbeta(SEXP xSEXP, SEXP betaSEXP, SEXP num_iterations_mcmcSEXP, SEXP rproposal_fn_xpsexpSEXP, SEXP dproposal_fn_xpsexpSEXP, SEXP other_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type num_iterations_mcmc(num_iterations_mcmcSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rproposal_fn_xpsexp(rproposal_fn_xpsexpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dproposal_fn_xpsexp(dproposal_fn_xpsexpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type other_params(other_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(metropolisCbeta(x, beta, num_iterations_mcmc, rproposal_fn_xpsexp, dproposal_fn_xpsexp, other_params));
    return rcpp_result_gen;
END_RCPP
}
// faC
double faC(NumericVector e);
RcppExport SEXP ais_faC(SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(faC(e));
    return rcpp_result_gen;
END_RCPP
}
// JacobianC
double JacobianC(NumericVector e);
RcppExport SEXP ais_JacobianC(SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(JacobianC(e));
    return rcpp_result_gen;
END_RCPP
}
// log_likelihoodC
double log_likelihoodC(NumericVector theta, IntegerVector powers_dirichlet);
RcppExport SEXP ais_log_likelihoodC(SEXP thetaSEXP, SEXP powers_dirichletSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type powers_dirichlet(powers_dirichletSEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihoodC(theta, powers_dirichlet));
    return rcpp_result_gen;
END_RCPP
}
// e_to_pC
NumericVector e_to_pC(NumericVector e);
RcppExport SEXP ais_e_to_pC(SEXP eSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    rcpp_result_gen = Rcpp::wrap(e_to_pC(e));
    return rcpp_result_gen;
END_RCPP
}
// fbC
double fbC(NumericVector e, NumericVector other_params);
RcppExport SEXP ais_fbC(SEXP eSEXP, SEXP other_paramsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type other_params(other_paramsSEXP);
    rcpp_result_gen = Rcpp::wrap(fbC(e, other_params));
    return rcpp_result_gen;
END_RCPP
}
// rproposal_distr
NumericVector rproposal_distr(NumericVector x, int n, double mult);
RcppExport SEXP ais_rproposal_distr(SEXP xSEXP, SEXP nSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mult(multSEXP);
    rcpp_result_gen = Rcpp::wrap(rproposal_distr(x, n, mult));
    return rcpp_result_gen;
END_RCPP
}
// dbeta_cond_distr
double dbeta_cond_distr(NumericVector x, NumericVector y, int n, double mult);
RcppExport SEXP ais_dbeta_cond_distr(SEXP xSEXP, SEXP ySEXP, SEXP nSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mult(multSEXP);
    rcpp_result_gen = Rcpp::wrap(dbeta_cond_distr(x, y, n, mult));
    return rcpp_result_gen;
END_RCPP
}
// putFunPtrInXPtr
XPtr<rDistrFnPtr> putFunPtrInXPtr(std::string distr_name);
RcppExport SEXP ais_putFunPtrInXPtr(SEXP distr_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type distr_name(distr_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(putFunPtrInXPtr(distr_name));
    return rcpp_result_gen;
END_RCPP
}
// getCondDensityFuncXPtr
XPtr<dCondDensityFnPtr> getCondDensityFuncXPtr(std::string distr_name);
RcppExport SEXP ais_getCondDensityFuncXPtr(SEXP distr_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type distr_name(distr_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(getCondDensityFuncXPtr(distr_name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP ais_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
